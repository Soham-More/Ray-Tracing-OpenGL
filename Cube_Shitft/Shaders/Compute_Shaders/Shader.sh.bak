#shader vertex
#version 330 core

layout(location = 0) in vec4 pos;
layout(location = 1) in vec2 tex;

uniform mat4 Projection;
uniform mat4 View;
uniform mat4 Model;

out vec2 uv;

void main()
{
	uv = tex;
	mat4 MVP = Projection * View * Model;

	gl_Position = MVP * pos;
}

#shader fragment
#version 330 core

uniform sampler2D texture;
in vec2 uv;

out vec4 Final_Color;

float Sigma = 1.25f;
float blur_radius = 0.0f;

float Get_Normal_Distribution(float x, float y)
{
    float e = 2.7182818284590452353602874713527f;
    float pi = 3.141592653589793238f;

    float Val = (1/(2 * pi * (Sigma * Sigma))) * pow(e, -((x*x) + y*y)/(2 * Sigma));

    return Val;
}

vec4 Get_Blurred_Pixel(float x, float y)
{
    vec2 offx = vec2(blur_radius, 0.0);
    vec2 offy = vec2(0.0, blur_radius);

    vec2 pos = uv;

    return texture2D(texture, pos + (x * offx) + (y * offy)) * Get_Normal_Distribution(x, y);
}

void main()
{
    vec2 offx = vec2(blur_radius, 0.0);
    vec2 offy = vec2(0.0, blur_radius);

    vec2 pos = uv;

    // DO NOT CHANGE THIS VALUE!!!!!
    // Changing this value will affect the program very badly.
    int Convolution_Matrix_Size = 5;

    vec4 Final_Color_Avg;

    for(int x = -1 * Convolution_Matrix_Size; x < Convolution_Matrix_Size; x++)
    {
        for(int y = -1 * Convolution_Matrix_Size; y < Convolution_Matrix_Size; y++)
        {
            Final_Color_Avg += Get_Blurred_Pixel(x, y);
        }
    }

    gl_FragColor = Final_Color_Avg;
}
